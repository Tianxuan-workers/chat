import { MapSources, MapOldSources } from '../utils/types.js';
import { WatchDeps } from '../watch/index.js';
import { WatchIgnorableReturn } from '../watchIgnorable/index.js';
import { WatchWithFilterOptions } from '../watchWithFilter/index.js';
import 'solid-js';
import 'solid-js/types/reactive/signal';
import '../utils/filters.js';

interface WatchTriggerableReturn<FnReturnT = void> extends WatchIgnorableReturn {
    /** Execute `WatchCallback` immediately */
    trigger: () => FnReturnT;
}
type WatchTriggerableCallback<V = any, OV = any, R = void> = (value: V, oldValue: OV) => R;
declare function watchTriggerable<T extends Readonly<Array<WatchDeps<unknown>>>, FnReturnT>(sources: [...T], cb: WatchTriggerableCallback<MapSources<T>, MapOldSources<T>, FnReturnT>, options?: WatchWithFilterOptions): WatchTriggerableReturn<FnReturnT>;
declare function watchTriggerable<T, FnReturnT>(source: WatchDeps<T>, cb: WatchTriggerableCallback<T, T | undefined, FnReturnT>, options?: WatchWithFilterOptions): WatchTriggerableReturn<FnReturnT>;
declare function watchTriggerable<T extends object, FnReturnT>(source: T, cb: WatchTriggerableCallback<T, T | undefined, FnReturnT>, options?: WatchWithFilterOptions): WatchTriggerableReturn<FnReturnT>;

export { WatchTriggerableCallback, WatchTriggerableReturn, watchTriggerable };
