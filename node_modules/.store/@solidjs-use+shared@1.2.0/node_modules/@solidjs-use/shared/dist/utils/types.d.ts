import { Accessor } from 'solid-js';
import { Signal, Setter, AccessorArray } from 'solid-js/types/reactive/signal';

/**
 * Any function
 */
type Fn = () => void;
/**
 * Any function
 */
type AnyFn = (...args: any[]) => any;
/**
 * Maybe it's a signal, or a plain value
 *
 * ```ts
 * type MaybeSignal<T> = T | Signal<T>
 * ```
 */
type MaybeSignal<T> = MaybeAccessor<T> | Signal<T>;
/**
 * Maybe it's a accessor, or a plain value
 */
type MaybeAccessor<T> = T | Accessor<T>;
type MaybeElement = HTMLElement | SVGElement | undefined | null;
type MaybeElementAccessor<T extends MaybeElement = MaybeElement> = MaybeAccessor<T>;
type Arrayable<T> = T[] | T;
/**
 * Infers the element type of an array
 */
type ElementOf<T> = T extends Array<infer E> ? E : never;
type Awaitable<T> = Promise<T> | T;
type ArgumentsType<T> = T extends (...args: infer U) => any ? U : never;
type PromisifyFn<T extends AnyFn> = (...args: ArgumentsType<T>) => Promise<ReturnType<T>>;
interface Pausable {
    /**
     * A Accessor indicate whether a pausable instance is active
     */
    isActive: Accessor<boolean>;
    /**
     * Temporary pause the effect from executing
     */
    pause: Fn;
    /**
     * Resume the effects
     */
    resume: Fn;
}
interface Stoppable<StartFnArgs extends any[] = any[]> {
    /**
     * A Accessor indicate whether a stoppable instance is executing
     */
    isPending: Accessor<boolean>;
    /**
     * Stop the effect from executing
     */
    stop: Fn;
    /**
     * Start the effects
     */
    start: (...args: StartFnArgs) => void;
}
/**
 * A Signal that allow to set null or undefined
 */
type RemovableSignal<T> = [Accessor<T>, Setter<T | undefined | null>];
type EffectOnDeps<S = any> = AccessorArray<S> | Accessor<S>;
type MapSources<T> = {
    [K in keyof T]: T[K] extends EffectOnDeps<infer V> ? V : never;
};
type MapOldSources<T> = {
    [K in keyof T]: T[K] extends EffectOnDeps<infer V> ? V | undefined : never;
};

export { AnyFn, ArgumentsType, Arrayable, Awaitable, EffectOnDeps, ElementOf, Fn, MapOldSources, MapSources, MaybeAccessor, MaybeElement, MaybeElementAccessor, MaybeSignal, Pausable, PromisifyFn, RemovableSignal, Stoppable };
