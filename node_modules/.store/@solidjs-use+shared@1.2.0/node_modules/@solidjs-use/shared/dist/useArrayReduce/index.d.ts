import { Accessor } from 'solid-js';
import { MaybeAccessor } from '../utils/types.js';
import 'solid-js/types/reactive/signal';

type UseArrayReducer<PV, CV, R> = (previousValue: PV, currentValue: CV, currentIndex: number) => R;
/**
 * Reactive `Array.reduce`
 *
 * @param {Array} list - the array was called upon.
 * @param reducer - a "reducer" function.
 *
 * @returns the value that results from running the "reducer" callback function to completion over the entire array.
 */
declare function useArrayReduce<T>(list: MaybeAccessor<Array<MaybeAccessor<T>>>, reducer: UseArrayReducer<T, T, T>): Accessor<T>;
/**
 * Reactive `Array.reduce`
 *
 * @param {Array} list - the array was called upon.
 * @param reducer - a "reducer" function.
 * @param initialValue - a value to be initialized the first time when the callback is called.
 *
 * @returns the value that results from running the "reducer" callback function to completion over the entire array.
 */
declare function useArrayReduce<T, U>(list: MaybeAccessor<Array<MaybeAccessor<T>>>, reducer: UseArrayReducer<U, T, U>, initialValue: MaybeAccessor<U>): Accessor<U>;

export { UseArrayReducer, useArrayReduce };
