import { Accessor } from 'solid-js';
import { MaybeAccessor, MapSources, MapOldSources } from '../utils/types.js';
import { WatchStopHandle, WatchSource, WatchCallback } from '../watch/index.js';
import { WatchWithFilterOptions } from '../watchWithFilter/index.js';
import 'solid-js/types/reactive/signal';
import '../utils/filters.js';

interface WatchAtMostOptions extends WatchWithFilterOptions {
    count: MaybeAccessor<number>;
}
interface WatchAtMostReturn {
    stop: WatchStopHandle;
    count: Accessor<number>;
}
declare function watchAtMost<T extends Readonly<Array<WatchSource<unknown>>>>(sources: [...T], cb: WatchCallback<MapSources<T>, MapOldSources<T>>, options: WatchAtMostOptions): WatchAtMostReturn;
declare function watchAtMost<T>(sources: WatchSource<T>, cb: WatchCallback<T>, options: WatchAtMostOptions): WatchAtMostReturn;

export { WatchAtMostOptions, WatchAtMostReturn, watchAtMost };
