import { OnOptions, AccessorArray, Accessor } from 'solid-js/types/reactive/signal';

type WatchOptions = OnOptions;
type WatchStopHandle = () => void;
type WatchDeps<S> = AccessorArray<S> | Accessor<S> | S;
type WatchSource<S> = WatchDeps<S>;
type WatchCallback<S, Next extends Prev = any, Prev = Next> = (input: S, prevInput: S | undefined, prev: Prev) => void | Next | Promise<void | Next>;
/**
 * Shorthand for `createEffect(on()))` and return stop handler
 */
declare function watch<S, Next extends Prev, Prev = Next>(deps: WatchDeps<S>, fn: WatchCallback<S, Next, Prev>, options?: OnOptions): () => void;

export { WatchCallback, WatchDeps, WatchOptions, WatchSource, WatchStopHandle, watch };
