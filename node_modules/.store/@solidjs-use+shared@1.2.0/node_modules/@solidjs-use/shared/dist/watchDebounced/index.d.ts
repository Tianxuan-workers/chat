import { DebounceFilterOptions } from '../utils/filters.js';
import { MaybeAccessor, MapSources, MapOldSources } from '../utils/types.js';
import { WatchOptions, WatchSource, WatchCallback, WatchStopHandle } from '../watch/index.js';
import 'solid-js';
import 'solid-js/types/reactive/signal';

interface WatchDebouncedOptions extends WatchOptions, DebounceFilterOptions {
    debounce?: MaybeAccessor<number>;
}
declare function watchDebounced<T extends Readonly<Array<WatchSource<unknown>>>>(sources: [...T], cb: WatchCallback<MapSources<T>, MapOldSources<T>>, options?: WatchDebouncedOptions): WatchStopHandle;
declare function watchDebounced<T>(source: WatchSource<T>, cb: WatchCallback<T>, options?: WatchDebouncedOptions): WatchStopHandle;
declare function watchDebounced<T extends object>(source: T, cb: WatchCallback<T>, options?: WatchDebouncedOptions): WatchStopHandle;

export { WatchDebouncedOptions, watchDebounced as debouncedWatch, watchDebounced };
