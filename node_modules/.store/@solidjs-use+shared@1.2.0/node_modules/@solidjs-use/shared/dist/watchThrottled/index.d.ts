import { MaybeAccessor, MapSources, MapOldSources } from '../utils/types.js';
import { WatchOptions, WatchSource, WatchCallback, WatchStopHandle } from '../watch/index.js';
import 'solid-js';
import 'solid-js/types/reactive/signal';

interface WatchThrottledOptions extends WatchOptions {
    throttle?: MaybeAccessor<number>;
    trailing?: boolean;
    leading?: boolean;
}
declare function watchThrottled<T extends Readonly<Array<WatchSource<unknown>>>>(sources: [...T], cb: WatchCallback<MapSources<T>, MapOldSources<T>>, options?: WatchThrottledOptions): WatchStopHandle;
declare function watchThrottled<T>(source: WatchSource<T>, cb: WatchCallback<T>, options?: WatchThrottledOptions): WatchStopHandle;
declare function watchThrottled<T extends object>(source: T, cb: WatchCallback<T>, options?: WatchThrottledOptions): WatchStopHandle;

export { WatchThrottledOptions, watchThrottled as throttledWatch, watchThrottled };
