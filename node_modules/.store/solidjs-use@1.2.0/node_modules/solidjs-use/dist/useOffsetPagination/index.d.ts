import { Setter, Accessor } from 'solid-js';
import { MaybeAccessor } from '@solidjs-use/shared';

interface UseOffsetPaginationOptions {
    /**
     * Total number of items.
     */
    total?: MaybeAccessor<number>;
    /**
     * The number of items to display per page.
     * @default 10
     */
    pageSize?: MaybeAccessor<number>;
    /**
     * Set per page.
     */
    setPageSize?: Setter<number>;
    /**
     * The current page number.
     * @default 1
     */
    page?: MaybeAccessor<number>;
    /**
     * Set current page.
     */
    setPage?: Setter<number>;
    /**
     * Callback when the `page` change.
     */
    onPageChange?: (returnValue: UseOffsetPaginationReturn) => unknown;
    /**
     * Callback when the `pageSize` change.
     */
    onPageSizeChange?: (returnValue: UseOffsetPaginationReturn) => unknown;
    /**
     * Callback when the `pageCount` change.
     */
    onPageCountChange?: (returnValue: UseOffsetPaginationReturn) => unknown;
}
interface UseOffsetPaginationReturn {
    currentPage: Accessor<number>;
    setCurrentPage: Setter<number>;
    currentPageSize: Accessor<number>;
    setCurrentPageSize: Setter<number>;
    pageCount: Accessor<number>;
    isFirstPage: Accessor<boolean>;
    isLastPage: Accessor<boolean>;
    prev: () => void;
    next: () => void;
}
type UseOffsetPaginationInfinityPageReturn = Omit<UseOffsetPaginationReturn, 'isLastPage'>;
declare function useOffsetPagination(options: Omit<UseOffsetPaginationOptions, 'total'>): UseOffsetPaginationInfinityPageReturn;
declare function useOffsetPagination(options: UseOffsetPaginationOptions): UseOffsetPaginationReturn;

export { UseOffsetPaginationInfinityPageReturn, UseOffsetPaginationOptions, UseOffsetPaginationReturn, useOffsetPagination };
