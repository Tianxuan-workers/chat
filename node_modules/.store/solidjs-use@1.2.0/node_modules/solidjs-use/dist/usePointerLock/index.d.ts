import * as solid_js from 'solid-js';
import { MaybeElementAccessor } from '@solidjs-use/shared';
import { ConfigurableDocument } from '../_configurable.js';

declare global {
    interface PointerLockOptions {
        unadjustedMovement?: boolean;
    }
    interface Element {
        requestPointerLock(options?: PointerLockOptions): Promise<void> | void;
    }
}
type MaybeHTMLElement = HTMLElement | undefined | null;
interface UsePointerLockOptions extends ConfigurableDocument {
    pointerLockOptions?: PointerLockOptions;
}
/**
 * Reactive pointer lock.
 */
declare function usePointerLock(target?: MaybeElementAccessor<MaybeHTMLElement>, options?: UsePointerLockOptions): {
    isSupported: solid_js.Accessor<boolean>;
    element: solid_js.Accessor<MaybeHTMLElement>;
    triggerElement: solid_js.Accessor<MaybeHTMLElement>;
    lock: (e: MaybeElementAccessor<MaybeHTMLElement> | Event, options?: PointerLockOptions) => Promise<HTMLElement>;
    unlock: () => Promise<boolean>;
};
type UsePointerLockReturn = ReturnType<typeof usePointerLock>;

export { UsePointerLockOptions, UsePointerLockReturn, usePointerLock };
