import { SwipeDirection } from '../useSwipe/index.js';
import { Accessor } from 'solid-js';
import { MaybeAccessor } from '@solidjs-use/shared';
import { PointerType, Position } from '../types.js';
import '../_configurable.js';

interface UsePointerSwipeOptions {
    /**
     * @default 50
     */
    threshold?: number;
    /**
     * Callback on swipe start.
     */
    onSwipeStart?: (e: PointerEvent) => void;
    /**
     * Callback on swipe move.
     */
    onSwipe?: (e: PointerEvent) => void;
    /**
     * Callback on swipe end.
     */
    onSwipeEnd?: (e: PointerEvent, direction: SwipeDirection) => void;
    /**
     * Pointer types to listen to.
     *
     * @default ['mouse', 'touch', 'pen']
     */
    pointerTypes?: PointerType[];
}
interface UsePointerSwipeReturn {
    isSwiping: Accessor<boolean>;
    direction: Accessor<SwipeDirection | null>;
    readonly posStart: Position;
    readonly posEnd: Position;
    distanceX: Accessor<number>;
    distanceY: Accessor<number>;
    stop: () => void;
}
/**
 * Reactive swipe detection based on PointerEvents.
 */
declare function usePointerSwipe(target: MaybeAccessor<HTMLElement | null | undefined>, options?: UsePointerSwipeOptions): UsePointerSwipeReturn;

export { UsePointerSwipeOptions, UsePointerSwipeReturn, usePointerSwipe };
