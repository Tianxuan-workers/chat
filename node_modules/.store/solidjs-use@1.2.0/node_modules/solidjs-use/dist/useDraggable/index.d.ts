import * as solid_js from 'solid-js';
import { MaybeAccessor } from '@solidjs-use/shared';
import { PointerType, Position } from '../types.js';
import '../_configurable.js';

interface UseDraggableOptions {
    /**
     * Only start the dragging when click on the element directly
     *
     * @default false
     */
    exact?: MaybeAccessor<boolean>;
    /**
     * Prevent events defaults
     *
     * @default false
     */
    preventDefault?: MaybeAccessor<boolean>;
    /**
     * Prevent events propagation
     *
     * @default false
     */
    stopPropagation?: MaybeAccessor<boolean>;
    /**
     * Element to attach `pointermove` and `pointerup` events to.
     *
     * @default window
     */
    draggingElement?: MaybeAccessor<HTMLElement | SVGElement | Window | Document | null | undefined>;
    /**
     * Handle that triggers the drag event
     *
     * @default target
     */
    handle?: MaybeAccessor<HTMLElement | SVGElement | null | undefined>;
    /**
     * Pointer types that listen to.
     *
     * @default ['mouse', 'touch', 'pen']
     */
    pointerTypes?: PointerType[];
    /**
     * Initial position of the element.
     *
     * @default { x: 0, y: 0 }
     */
    initialValue?: MaybeAccessor<Position>;
    /**
     * Callback when the dragging starts. Return `false` to prevent dragging.
     */
    onStart?: (position: Position, event: PointerEvent) => void | false;
    /**
     * Callback during dragging.
     */
    onMove?: (position: Position, event: PointerEvent) => void;
    /**
     * Callback when dragging end.
     */
    onEnd?: (position: Position, event: PointerEvent) => void;
}
/**
 * Make elements draggable.
 */
declare function useDraggable(target: MaybeAccessor<HTMLElement | SVGElement | null | undefined>, options?: UseDraggableOptions): {
    x: () => number;
    y: () => number;
    position: {
        value: Position;
    };
    isDragging: solid_js.Accessor<boolean>;
    style: solid_js.Accessor<{
        left: string;
        top: string;
    }>;
};
type UseDraggableReturn = ReturnType<typeof useDraggable>;

export { UseDraggableOptions, UseDraggableReturn, useDraggable };
