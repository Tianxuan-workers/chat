import * as solid_js from 'solid-js';
import { MaybeElementAccessor } from '@solidjs-use/shared';
import { ConfigurableWindow } from '../_configurable.js';

interface UseIntersectionObserverOptions extends ConfigurableWindow {
    /**
     * The Element or Document whose bounds are used as the bounding box when testing for intersection.
     */
    root?: MaybeElementAccessor;
    /**
     * A string which specifies a set of offsets to add to the root's bounding_box when calculating intersections.
     */
    rootMargin?: string;
    /**
     * Either a single number or an array of numbers between 0.0 and 1.
     */
    threshold?: number | number[];
}
/**
 * Detects that a target element's visibility.
 */
declare function useIntersectionObserver(target: MaybeElementAccessor, callback: IntersectionObserverCallback, options?: UseIntersectionObserverOptions): {
    isSupported: solid_js.Accessor<boolean>;
    stop: () => void;
};
type UseIntersectionObserverReturn = ReturnType<typeof useIntersectionObserver>;

export { UseIntersectionObserverOptions, UseIntersectionObserverReturn, useIntersectionObserver };
