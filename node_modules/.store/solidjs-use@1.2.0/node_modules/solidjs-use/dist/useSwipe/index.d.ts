import { Position } from '../types.js';
import { ConfigurableWindow } from '../_configurable.js';
import { Accessor } from 'solid-js';
import { MaybeAccessor } from '@solidjs-use/shared';

declare enum SwipeDirection {
    UP = "UP",
    RIGHT = "RIGHT",
    DOWN = "DOWN",
    LEFT = "LEFT",
    NONE = "NONE"
}
interface UseSwipeOptions extends ConfigurableWindow {
    /**
     * Register events as passive
     *
     * @default true
     */
    passive?: boolean;
    /**
     * @default 50
     */
    threshold?: number;
    /**
     * Callback on swipe start
     */
    onSwipeStart?: (e: TouchEvent) => void;
    /**
     * Callback on swipe moves
     */
    onSwipe?: (e: TouchEvent) => void;
    /**
     * Callback on swipe ends
     */
    onSwipeEnd?: (e: TouchEvent, direction: SwipeDirection) => void;
}
interface UseSwipeReturn {
    isPassiveEventSupported: boolean;
    isSwiping: Accessor<boolean>;
    direction: Accessor<SwipeDirection | null>;
    coordsStart: Readonly<Position>;
    coordsEnd: Readonly<Position>;
    lengthX: Accessor<number>;
    lengthY: Accessor<number>;
    stop: () => void;
}
/**
 * Reactive swipe detection.
 */
declare function useSwipe(target: MaybeAccessor<EventTarget | null | undefined>, options?: UseSwipeOptions): UseSwipeReturn;

export { SwipeDirection, UseSwipeOptions, UseSwipeReturn, useSwipe };
