import { MaybeElementAccessor } from '@solidjs-use/shared';
import { ConfigurableWindow } from '../_configurable.js';

interface OnClickOutsideOptions extends ConfigurableWindow {
    /**
     * List of elements that should not trigger the event.
     */
    ignore?: Array<MaybeElementAccessor | string>;
    /**
     * Use capturing phase for internal event listener.
     * @default true
     */
    capture?: boolean;
    /**
     * Run handler function if focus moves to an iframe.
     * @default false
     */
    detectIframe?: boolean;
}
type OnClickOutsideHandler<T extends {
    detectIframe: OnClickOutsideOptions['detectIframe'];
} = {
    detectIframe: false;
}> = (evt: T['detectIframe'] extends true ? PointerEvent | FocusEvent : PointerEvent) => void;
/**
 * Listen for clicks outside of an element.
 */
declare function onClickOutside<T extends OnClickOutsideOptions>(target: MaybeElementAccessor, handler: OnClickOutsideHandler<{
    detectIframe: T['detectIframe'];
}>, options?: T): (() => void) | undefined;

export { OnClickOutsideHandler, OnClickOutsideOptions, onClickOutside };
