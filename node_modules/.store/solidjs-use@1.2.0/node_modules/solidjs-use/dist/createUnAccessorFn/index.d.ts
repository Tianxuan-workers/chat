import { MaybeAccessor } from '@solidjs-use/shared';

type unAccessorFn<T> = T extends (...args: infer A) => infer R ? (...args: {
    [K in keyof A]: MaybeAccessor<A[K]>;
}) => R : never;
/**
 * Make a plain function accepting Accessor and raw values as arguments.
 * Returns the same value the unconverted function returns, with proper typing.
 */
declare const createUnAccessorFn: <T extends Function>(fn: T) => unAccessorFn<T>;

export { createUnAccessorFn, unAccessorFn };
