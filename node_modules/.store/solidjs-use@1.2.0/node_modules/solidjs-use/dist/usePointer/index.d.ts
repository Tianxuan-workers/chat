import * as solid_js from 'solid-js';
import { Position, PointerType } from '../types.js';
import { ConfigurableWindow } from '../_configurable.js';
import { MaybeAccessor } from '@solidjs-use/shared';

interface UsePointerState extends Position {
    pressure: number;
    pointerId: number;
    tiltX: number;
    tiltY: number;
    width: number;
    height: number;
    twist: number;
    pointerType: PointerType | null;
}
interface UsePointerOptions extends ConfigurableWindow {
    /**
     * Pointer types that listen to.
     *
     * @default ['mouse', 'touch', 'pen']
     */
    pointerTypes?: PointerType[];
    /**
     * Initial values
     */
    initialValue?: MaybeAccessor<Partial<UsePointerState>>;
    /**
     * @default window
     */
    target?: MaybeAccessor<EventTarget | null | undefined> | Document | Window;
}
/**
 * Reactive pointer state.
 */
declare function usePointer(options?: UsePointerOptions): {
    isInside: solid_js.Accessor<boolean>;
    x: solid_js.Accessor<number | PointerType | null>;
    y: solid_js.Accessor<number | PointerType | null>;
    height: solid_js.Accessor<number | PointerType | null>;
    width: solid_js.Accessor<number | PointerType | null>;
    pressure: solid_js.Accessor<number | PointerType | null>;
    pointerId: solid_js.Accessor<number | PointerType | null>;
    tiltX: solid_js.Accessor<number | PointerType | null>;
    tiltY: solid_js.Accessor<number | PointerType | null>;
    twist: solid_js.Accessor<number | PointerType | null>;
    pointerType: solid_js.Accessor<number | PointerType | null>;
};
type UsePointerReturn = ReturnType<typeof usePointer>;

export { UsePointerOptions, UsePointerReturn, UsePointerState, usePointer };
