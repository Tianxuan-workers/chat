import * as solid_js from 'solid-js';
import { ConfigurableNavigator } from '../_configurable.js';
import { MaybeAccessor, Pausable } from '@solidjs-use/shared';

interface UseVibrateOptions extends ConfigurableNavigator {
    /**
     *
     * Vibration Pattern
     *
     * An array of values describes alternating periods in which the
     * device is vibrating and not vibrating. Each value in the array
     * is converted to an integer, then interpreted alternately as
     * the number of milliseconds the device should vibrate and the
     * number of milliseconds it should not be vibrating
     *
     * @default []
     *
     */
    pattern?: MaybeAccessor<number[] | number>;
    /**
     * Interval to run a persistent vibration, in ms
     *
     * Pass `0` to disable
     *
     * @default 0
     *
     */
    interval?: number;
}
/**
 * Reactive vibrate
 */
declare function useVibrate(options?: UseVibrateOptions): {
    isSupported: solid_js.Accessor<boolean>;
    pattern: MaybeAccessor<number | number[]>;
    intervalControls: Pausable | undefined;
    vibrate: (pattern?: number | number[]) => void;
    stop: () => void;
};
type UseVibrateReturn = ReturnType<typeof useVibrate>;

export { UseVibrateOptions, UseVibrateReturn, useVibrate };
