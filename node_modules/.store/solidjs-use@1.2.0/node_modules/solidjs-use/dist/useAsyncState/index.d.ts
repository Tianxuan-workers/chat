import { Accessor } from 'solid-js';

interface UseAsyncStateReturn<Data, Params extends any[]> {
    state: Accessor<Data>;
    isReady: Accessor<boolean>;
    isLoading: Accessor<boolean>;
    error: Accessor<unknown>;
    execute: (delay?: number, ...args: Params) => Promise<Data>;
}
interface UseAsyncStateOptions<T = any> {
    /**
     * Delay for executing the promise. In milliseconds.
     *
     * @default 0
     */
    delay?: number;
    /**
     * Execute the promise right after the function is invoked.
     * Will apply the delay if any.
     *
     * When set to false, you will need to execute it manually.
     *
     * @default true
     */
    immediate?: boolean;
    /**
     * Callback when error is caught.
     */
    onError?: (e: unknown) => void;
    /**
     * Callback when success is caught.
     */
    onSuccess?: (data: T) => void;
    /**
     * Sets the state to initialState before executing the promise.
     *
     * This can be useful when calling the execute function more than once (for
     * example, to refresh data). When set to false, the current state remains
     * unchanged until the promise resolves.
     *
     * @default true
     */
    resetOnExecute?: boolean;
    /**
     *
     * An error is thrown when executing the execute function
     *
     * @default false
     */
    throwError?: boolean;
}
/**
 * Reactive async state. Will not block your setup function and will trigger changes once
 * the promise is ready.
 */
declare function useAsyncState<Data, Params extends any[] = []>(promise: Promise<Data> | ((...args: Params) => Promise<Data>), initialState: Data, options?: UseAsyncStateOptions<Data>): UseAsyncStateReturn<Data, Params>;

export { UseAsyncStateOptions, UseAsyncStateReturn, useAsyncState };
