import { Accessor, JSX, Signal } from 'solid-js';
import { createMutable } from 'solid-js/store';

declare type ComputedSetter<T> = (v: T) => void;
type ComputedGetter<T> = (...args: any[]) => T;
interface WritableComputedOptions<T> {
    get: ComputedGetter<T>;
    set: ComputedSetter<T>;
}
type WritableComputedReturn<T> = [Accessor<T>, ComputedSetter<T>];
declare function writableComputed<T>(options: WritableComputedOptions<T>): WritableComputedReturn<T>;

declare const reactive: typeof createMutable;

declare function nextTick<T = void>(this: T, fn?: (this: T) => void): Promise<void>;

type StyleValue = JSX.HTMLAttributes<HTMLDivElement>['style'];

declare function isAccessor<T>(val?: unknown): val is Accessor<T>;
declare function isSignal<T>(val?: unknown): val is Signal<T>;
type SimpleSetter<T> = (v?: T | ((val: T | undefined) => T)) => void;
declare function toSignal<T>(v: T | Accessor<T> | Signal<T>): Signal<T>;
declare function toAccessor<T>(v: T | undefined | null | Accessor<T | null | undefined>): Accessor<T | null | undefined>;
declare function getSetterValue<T>(v: any, pre: T): T;
declare function set<T>(target: any, key: any, val: T): T;
declare function del(target: any, key: any): void;
declare const isFunction: <T extends Function>(val: any) => val is T;

export { ComputedGetter, ComputedSetter, SimpleSetter, StyleValue, WritableComputedOptions, WritableComputedReturn, del, getSetterValue, isAccessor, isFunction, isSignal, nextTick, reactive, set, toAccessor, toSignal, writableComputed };
