"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const store = require("solid-js/store");
const solidJs = require("solid-js");
function writableComputed(options) {
  return [options.get, options.set];
}
const reactive = store.createMutable;
const resolvedPromise = Promise.resolve();
function nextTick(fn) {
  return fn ? resolvedPromise.then(this ? fn.bind(this) : fn) : resolvedPromise;
}
function isAccessor(val) {
  return typeof val === "function";
}
function isSignal(val) {
  return Array.isArray(val) && val.length === 2 && typeof val[0] === "function" && typeof val[1] === "function";
}
const noop = () => {
};
function toSignal(v) {
  if (isSignal(v)) {
    return v;
  } else if (isAccessor(v)) {
    return [v, noop];
  }
  return solidJs.createSignal(v);
}
function toAccessor(v) {
  if (v === void 0 || !isAccessor(v)) {
    return solidJs.createSignal(v)[0];
  }
  return v;
}
function getSetterValue(v, pre) {
  return typeof v === "function" ? v(pre) : v;
}
function set(target, key, val) {
  if (Array.isArray(target)) {
    target.length = Math.max(target.length, key);
    target.splice(key, 1, val);
    return val;
  }
  target[key] = val;
  return val;
}
function del(target, key) {
  if (Array.isArray(target)) {
    target.splice(key, 1);
    return;
  }
  delete target[key];
}
const isFunction = (val) => typeof val === "function";
exports.del = del;
exports.getSetterValue = getSetterValue;
exports.isAccessor = isAccessor;
exports.isFunction = isFunction;
exports.isSignal = isSignal;
exports.nextTick = nextTick;
exports.reactive = reactive;
exports.set = set;
exports.toAccessor = toAccessor;
exports.toSignal = toSignal;
exports.writableComputed = writableComputed;
