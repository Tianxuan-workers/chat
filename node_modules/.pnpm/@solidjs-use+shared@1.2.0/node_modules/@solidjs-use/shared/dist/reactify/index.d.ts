import { Accessor } from 'solid-js';
import { MaybeAccessor } from '../utils/types.js';
import 'solid-js/types/reactive/signal';

type Reactified<T> = T extends (...args: infer A) => infer R ? (...args: {
    [K in keyof A]: MaybeAccessor<A[K]>;
}) => Accessor<R> : never;
/**
 * Converts plain function into a reactive function.
 * The converted function accepts Signals as it's arguments
 * and returns a ComputedRef, with proper typing.
 *
 * @param fn - Source function
 */
declare function reactify<T extends Function>(fn: T): Reactified<T>;

export { Reactified, reactify as createReactiveFn, reactify };
