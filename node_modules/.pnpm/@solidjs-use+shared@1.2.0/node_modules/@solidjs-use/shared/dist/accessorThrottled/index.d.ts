import { Accessor } from 'solid-js';

/**
 * Throttle execution of a function. Especially useful for rate limiting
 * execution of handlers on events like resize and scroll.
 *
 * @param value Ref value to be watched with throttle effect
 * @param  delay  A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.
 * @param [trailing=true] if true, update the value again after the delay time is up
 * @param [leading=true] if true, update the value on the leading edge of the ms timeout
 */
declare function accessorThrottled<T>(value: Accessor<T>, delay?: number, trailing?: boolean, leading?: boolean): Accessor<T>;

export { accessorThrottled, accessorThrottled as throttledAccessor, accessorThrottled as useThrottle };
