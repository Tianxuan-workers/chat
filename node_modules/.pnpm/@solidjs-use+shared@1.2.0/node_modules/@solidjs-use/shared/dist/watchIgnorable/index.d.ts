import { OnOptions } from 'solid-js/types/reactive/signal';
import { ConfigurableEventFilter } from '../utils/filters.js';
import { WatchStopHandle, WatchDeps, WatchCallback } from '../watch/index.js';
import '../utils/types.js';
import 'solid-js';

interface EffectWithFilterOptions extends OnOptions, ConfigurableEventFilter {
}
type IgnoredUpdater = (updater: () => void) => void;
interface WatchIgnorableReturn {
    ignoreUpdates: IgnoredUpdater;
    stop: WatchStopHandle;
}
declare function watchIgnorable<S, Next extends Prev, Prev = Next>(source: WatchDeps<S>, cb: WatchCallback<S, Next, Prev>, options?: EffectWithFilterOptions): WatchIgnorableReturn;

export { EffectWithFilterOptions, IgnoredUpdater, WatchIgnorableReturn, watchIgnorable as ignorableEffect, watchIgnorable };
