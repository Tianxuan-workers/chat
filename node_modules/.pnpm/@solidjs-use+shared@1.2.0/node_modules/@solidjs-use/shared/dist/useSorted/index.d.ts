import { Accessor } from 'solid-js';
import { MaybeSignal } from '../utils/types.js';
import 'solid-js/types/reactive/signal';

type UseSortedCompareFn<T = any> = (a: T, b: T) => number;
type UseSortedFn<T = any> = (arr: T[], compareFn: UseSortedCompareFn<T>) => T[];
interface UseSortedOptions<T = any> {
    /**
     * sort algorithm
     */
    sortFn?: UseSortedFn<T>;
    /**
     * compare function
     */
    compareFn?: UseSortedCompareFn<T>;
    /**
     * change the value of the source array
     * @default false
     */
    dirty?: boolean;
}
declare function useSorted<T = any>(source: MaybeSignal<T[]>, compareFn?: UseSortedCompareFn<T>): Accessor<T[]>;
declare function useSorted<T = any>(source: MaybeSignal<T[]>, options?: UseSortedOptions<T>): Accessor<T[]>;
declare function useSorted<T = any>(source: MaybeSignal<T[]>, compareFn?: UseSortedCompareFn<T>, options?: Omit<UseSortedOptions<T>, 'compareFn'>): Accessor<T[]>;

export { UseSortedCompareFn, UseSortedFn, UseSortedOptions, useSorted };
