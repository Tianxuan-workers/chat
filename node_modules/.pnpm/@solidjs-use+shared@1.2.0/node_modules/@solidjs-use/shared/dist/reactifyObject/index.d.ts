import { Reactified } from '../reactify/index.js';
import 'solid-js';
import '../utils/types.js';
import 'solid-js/types/reactive/signal';

type ReactifyNested<T, Keys extends keyof T = keyof T> = {
    [K in Keys]: T[K] extends (...args: any[]) => any ? Reactified<T[K]> : T[K];
};
interface ReactifyObjectOptions {
    /**
     * Includes names from Object.getOwnPropertyNames
     *
     * @default true
     */
    includeOwnProperties?: boolean;
}
/**
 * Apply `reactify` to an object
 */
declare function reactifyObject<T extends object, Keys extends keyof T>(obj: T, keys?: Array<keyof T>): ReactifyNested<T, Keys>;
declare function reactifyObject<T extends object>(obj: T, options?: ReactifyObjectOptions): ReactifyNested<T, keyof T>;

export { ReactifyNested, ReactifyObjectOptions, reactifyObject };
