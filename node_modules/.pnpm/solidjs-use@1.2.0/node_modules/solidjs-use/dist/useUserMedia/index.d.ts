import * as solid_js from 'solid-js';
import { MaybeAccessor } from '@solidjs-use/shared';
import { ConfigurableNavigator } from '../_configurable.js';

interface UseUserMediaOptions extends ConfigurableNavigator {
    /**
     * If the stream is enabled
     * @default false
     */
    enabled?: MaybeAccessor<boolean>;
    /**
     * Recreate stream when the input devices id changed
     *
     * @default true
     */
    autoSwitch?: MaybeAccessor<boolean>;
    /**
     * The device id of video input
     *
     * When passing with `undefined` the default device will be used.
     * Pass `false` or "none" to disabled video input
     *
     * @default undefined
     */
    videoDeviceId?: MaybeAccessor<string | undefined | false | 'none'>;
    /**
     * The device id of audi input
     *
     * When passing with `undefined` the default device will be used.
     * Pass `false` or "none" to disabled audi input
     *
     * @default undefined
     */
    audioDeviceId?: MaybeAccessor<string | undefined | false | 'none'>;
}
/**
 * Reactive `mediaDevices.getUserMedia` streaming
 */
declare function useUserMedia(options?: UseUserMediaOptions): {
    isSupported: solid_js.Accessor<boolean>;
    stream: solid_js.Accessor<MediaStream | undefined>;
    start: () => Promise<MediaStream | undefined>;
    stop: () => void;
    restart: () => Promise<MediaStream | undefined>;
    videoDeviceId: solid_js.Accessor<string | false | undefined>;
    audioDeviceId: solid_js.Accessor<string | false | undefined>;
    enabled: solid_js.Accessor<MaybeAccessor<boolean>>;
    setEnabled: solid_js.Setter<MaybeAccessor<boolean>>;
    autoSwitch: solid_js.Accessor<MaybeAccessor<boolean>>;
    setAutoSwitch: solid_js.Setter<MaybeAccessor<boolean>>;
};
type UseUserMediaReturn = ReturnType<typeof useUserMedia>;

export { UseUserMediaOptions, UseUserMediaReturn, useUserMedia };
