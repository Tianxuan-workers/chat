import * as solid_js from 'solid-js';
import { Accessor } from 'solid-js';
import { MaybeAccessor } from '@solidjs-use/shared';
import { OnOptions } from 'solid-js/types/reactive/signal';

interface UseClonedOptions<T = any> extends OnOptions {
    /**
     * Custom clone function.
     *
     * By default, it use `JSON.parse(JSON.stringify(value))` to clone.
     */
    clone?: (source: T) => T;
    /**
     * Manually sync the Accessor
     *
     * @default false
     */
    manual?: boolean;
}
interface UseClonedReturn<T> {
    /**
     * Cloned Accessor
     */
    cloned: Accessor<T>;
    /**
     * Sync cloned data with source manually
     */
    sync: () => void;
}
type CloneFn<F, T = F> = (x: F) => T;
declare function cloneFnJSON<T>(source: T): T;
declare function useCloned<T>(source: MaybeAccessor<T>, options?: UseClonedOptions): {
    cloned: Accessor<T>;
    setCloned: solid_js.Setter<T>;
    sync: () => void;
};

export { CloneFn, UseClonedOptions, UseClonedReturn, cloneFnJSON, useCloned };
