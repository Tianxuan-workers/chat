import { Accessor } from 'solid-js';
import { MaybeAccessor } from '@solidjs-use/shared';

interface ToDataURLOptions {
    /**
     * MIME type
     */
    type?: string | undefined;
    /**
     * Image quality of jpeg or webp
     */
    quality?: any;
}
interface UseBase64ObjectOptions<T> {
    serializer: (v: T) => string;
}
interface UseBase64Return {
    base64: Accessor<string>;
    promise: Accessor<Promise<string>>;
    execute: () => Promise<string>;
}
declare function useBase64(target: MaybeAccessor<string>): UseBase64Return;
declare function useBase64(target: MaybeAccessor<Blob>): UseBase64Return;
declare function useBase64(target: MaybeAccessor<ArrayBuffer>): UseBase64Return;
declare function useBase64(target: MaybeAccessor<HTMLCanvasElement>, options?: ToDataURLOptions): UseBase64Return;
declare function useBase64(target: MaybeAccessor<HTMLImageElement>, options?: ToDataURLOptions): UseBase64Return;
declare function useBase64<T extends Record<string, unknown>>(target: MaybeAccessor<T>, options?: UseBase64ObjectOptions<T>): UseBase64Return;
declare function useBase64<T extends Map<string, unknown>>(target: MaybeAccessor<T>, options?: UseBase64ObjectOptions<T>): UseBase64Return;
declare function useBase64<T extends Set<unknown>>(target: MaybeAccessor<T>, options?: UseBase64ObjectOptions<T>): UseBase64Return;
declare function useBase64<T>(target: MaybeAccessor<T[]>, options?: UseBase64ObjectOptions<T[]>): UseBase64Return;

export { ToDataURLOptions, UseBase64ObjectOptions, UseBase64Return, useBase64 };
