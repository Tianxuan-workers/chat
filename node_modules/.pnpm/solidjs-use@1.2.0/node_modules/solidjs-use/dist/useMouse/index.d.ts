import * as solid_js from 'solid-js';
import { ConfigurableEventFilter } from '@solidjs-use/shared';
import { Position } from '../types.js';
import { ConfigurableWindow } from '../_configurable.js';

interface UseMouseOptions extends ConfigurableWindow, ConfigurableEventFilter {
    /**
     * Mouse position based by page, client, or relative to previous position
     *
     * @default 'page'
     */
    type?: 'page' | 'client' | 'movement';
    /**
     * Listen to `touchmove` events
     *
     * @default true
     */
    touch?: boolean;
    /**
     * Reset to initial value when `touchend` event fired
     *
     * @default false
     */
    resetOnTouchEnds?: boolean;
    /**
     * Initial values
     */
    initialValue?: Position;
}
type MouseSourceType = 'mouse' | 'touch' | null;
/**
 * Reactive mouse position.
 */
declare function useMouse(options?: UseMouseOptions): {
    x: solid_js.Accessor<number>;
    y: solid_js.Accessor<number>;
    setX: solid_js.Setter<number>;
    setY: solid_js.Setter<number>;
    sourceType: solid_js.Accessor<MouseSourceType>;
};
type UseMouseReturn = ReturnType<typeof useMouse>;

export { MouseSourceType, UseMouseOptions, UseMouseReturn, useMouse };
