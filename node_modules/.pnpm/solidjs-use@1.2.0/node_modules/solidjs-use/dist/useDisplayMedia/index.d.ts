import * as solid_js from 'solid-js';
import { ConfigurableNavigator } from '../_configurable.js';
import { MaybeSignal } from '@solidjs-use/shared';

interface UseDisplayMediaOptions extends ConfigurableNavigator {
    /**
     * If the stream is enabled
     * @default false
     */
    enabled?: MaybeSignal<boolean>;
    /**
     * If the stream video media constraints
     */
    video?: boolean | MediaTrackConstraints | undefined;
    /**
     * If the stream audio media constraints
     */
    audio?: boolean | MediaTrackConstraints | undefined;
}
/**
 * Reactive `mediaDevices.getDisplayMedia` streaming
 */
declare function useDisplayMedia(options?: UseDisplayMediaOptions): {
    isSupported: solid_js.Accessor<boolean>;
    stream: solid_js.Accessor<MediaStream | undefined>;
    start: () => Promise<MediaStream | undefined>;
    stop: () => void;
    enabled: solid_js.Accessor<boolean>;
    setEnabled: solid_js.Setter<boolean>;
};
type UseDisplayMediaReturn = ReturnType<typeof useDisplayMedia>;

export { UseDisplayMediaOptions, UseDisplayMediaReturn, useDisplayMedia };
