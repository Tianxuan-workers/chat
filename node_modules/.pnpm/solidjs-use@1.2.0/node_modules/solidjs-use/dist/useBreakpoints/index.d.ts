import { Accessor } from 'solid-js';
import { ConfigurableWindow } from '../_configurable.js';
export { breakpointsAntDesign, breakpointsBootstrapV5, breakpointsMasterCss, breakpointsQuasar, breakpointsSematic, breakpointsTailwind, breakpointsVuetify } from './breakpoints.js';

type Breakpoints<K extends string = string> = Record<K, number | string>;
/**
 * Reactively viewport breakpoints
 */
declare function useBreakpoints<K extends string>(breakpoints: Breakpoints<K>, options?: ConfigurableWindow): {
    greater(k: K): Accessor<boolean>;
    greaterOrEqual: (k: K) => Accessor<boolean>;
    smaller(k: K): Accessor<boolean>;
    smallerOrEqual(k: K): Accessor<boolean>;
    between(a: K, b: K): Accessor<boolean>;
    isGreater(k: K): boolean;
    isGreaterOrEqual(k: K): boolean;
    isSmaller(k: K): boolean;
    isSmallerOrEqual(k: K): boolean;
    isInBetween(a: K, b: K): boolean;
} & Record<K, Accessor<boolean>>;
type UseBreakpointsReturn<K extends string = string> = {
    greater: (k: K) => Accessor<boolean>;
    greaterOrEqual: (k: K) => Accessor<boolean>;
    smaller: (k: K) => Accessor<boolean>;
    smallerOrEqual: (k: K) => Accessor<boolean>;
    between: (a: K, b: K) => Accessor<boolean>;
    isGreater: (k: K) => boolean;
    isGreaterOrEqual: (k: K) => boolean;
    isSmaller: (k: K) => boolean;
    isSmallerOrEqual: (k: K) => boolean;
    isInBetween: (a: K, b: K) => boolean;
} & Record<K, Accessor<boolean>>;

export { Breakpoints, UseBreakpointsReturn, useBreakpoints };
