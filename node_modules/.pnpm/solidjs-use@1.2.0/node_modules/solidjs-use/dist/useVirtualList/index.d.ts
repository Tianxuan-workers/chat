import { StyleValue } from '@solidjs-use/shared/solid-to-vue';
import { Accessor } from 'solid-js';
import { MaybeAccessor } from '@solidjs-use/shared';

type UseVirtualListItemSize = number | ((index: number) => number);
interface UseHorizontalVirtualListOptions extends UseVirtualListOptionsBase {
    /**
     * item width, accept a pixel value or a function that returns the height
     *
     * @default 0
     */
    itemWidth: UseVirtualListItemSize;
}
interface UseVerticalVirtualListOptions extends UseVirtualListOptionsBase {
    /**
     * item height, accept a pixel value or a function that returns the height
     *
     * @default 0
     */
    itemHeight: UseVirtualListItemSize;
}
interface UseVirtualListOptionsBase {
    /**
     * the extra buffer items outside of the view area
     *
     * @default 5
     */
    overscan?: number;
}
type UseVirtualListOptions = UseHorizontalVirtualListOptions | UseVerticalVirtualListOptions;
interface UseVirtualListItem<T> {
    data: T;
    index: number;
}
interface UseVirtualListReturn<T> {
    list: Accessor<Array<UseVirtualListItem<T>>>;
    scrollTo: (index: number) => void;
    containerProps: {
        ref: (el: HTMLElement | null) => void;
        onScroll: () => void;
        style: StyleValue;
    };
    wrapperProps: Accessor<{
        style: {
            width: string;
            height: string;
            'margin-top': string;
        } | {
            width: string;
            height: string;
            'margin-left': string;
            display: string;
        };
    }>;
}
declare function useVirtualList<T = any>(list: MaybeAccessor<T[]>, options: UseVirtualListOptions): UseVirtualListReturn<T>;

export { UseHorizontalVirtualListOptions, UseVerticalVirtualListOptions, UseVirtualListItem, UseVirtualListOptions, UseVirtualListOptionsBase, UseVirtualListReturn, useVirtualList };
