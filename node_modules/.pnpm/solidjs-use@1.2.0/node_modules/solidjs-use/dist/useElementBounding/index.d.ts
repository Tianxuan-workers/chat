import * as solid_js from 'solid-js';
import { MaybeElementAccessor } from '@solidjs-use/shared';

interface UseElementBoundingOptions {
    /**
     * Reset values to 0 on component unmounted
     *
     * @default true
     */
    reset?: boolean;
    /**
     * Listen to window resize event
     *
     * @default true
     */
    windowResize?: boolean;
    /**
     * Listen to window scroll event
     *
     * @default true
     */
    windowScroll?: boolean;
    /**
     * Immediately call update on component mounted
     *
     * @default true
     */
    immediate?: boolean;
}
/**
 * Reactive bounding box of an HTML element.
 */
declare function useElementBounding(target: MaybeElementAccessor, options?: UseElementBoundingOptions): {
    height: solid_js.Accessor<number>;
    bottom: solid_js.Accessor<number>;
    left: solid_js.Accessor<number>;
    right: solid_js.Accessor<number>;
    top: solid_js.Accessor<number>;
    width: solid_js.Accessor<number>;
    x: solid_js.Accessor<number>;
    y: solid_js.Accessor<number>;
    update: () => void;
};
type UseElementBoundingReturn = ReturnType<typeof useElementBounding>;

export { UseElementBoundingOptions, UseElementBoundingReturn, useElementBounding };
