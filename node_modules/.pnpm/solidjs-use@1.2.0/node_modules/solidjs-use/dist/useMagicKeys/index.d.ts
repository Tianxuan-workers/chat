export { DefaultMagicKeysAliasMap } from './aliasMap.js';
import { Accessor } from 'solid-js';
import { MaybeAccessor } from '@solidjs-use/shared';

interface UseMagicKeysOptions {
    /**
     * Target for listening events
     *
     * @default window
     */
    target?: MaybeAccessor<EventTarget>;
    /**
     * Alias map for keys, all the keys should be lowercase
     * { target: keycode }
     *
     * @example { ctrl: "control" }
     * @default <predefined-map>
     */
    aliasMap?: Record<string, string>;
    /**
     * Register passive listener
     *
     * @default true
     */
    passive?: boolean;
    /**
     * Custom event handler for keydown/keyup event.
     * Useful when you want to apply custom logic.
     *
     * When using `e.preventDefault()`, you will need to pass `passive: false` to useMagicKeys().
     */
    onEventFired?: (e: KeyboardEvent) => void | boolean;
}
interface MagicKeysInternal {
    /**
     * A Set of currently pressed keys,
     * Stores raw keyCodes.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key
     */
    current: Set<string>;
}
type UseMagicKeysReturn = Readonly<Omit<Record<string, Accessor<boolean>>, keyof MagicKeysInternal> & MagicKeysInternal>;
declare const getSetCompat: <T>() => {
    value(): T[];
    add: (val: T) => undefined;
    has: (val: T) => boolean;
    delete: (val: T) => boolean;
    clear: () => void;
};
/**
 * Reactive keys pressed state, with magical keys combination support.
 */
declare function useMagicKeys(options?: UseMagicKeysOptions): UseMagicKeysReturn;
declare function useMagicKeys(options: UseMagicKeysOptions): UseMagicKeysReturn;

export { MagicKeysInternal, UseMagicKeysOptions, UseMagicKeysReturn, getSetCompat, useMagicKeys };
