import { Signal, Accessor, Setter } from 'solid-js';
import { MaybeAccessor } from '@solidjs-use/shared';

interface UseCycleListOptions<T> {
    /**
     * The initial value of the state.
     * A Accessor can be provided to reuse.
     */
    initialValue?: MaybeAccessor<T> | Signal<T>;
    /**
     * The default index when
     */
    fallbackIndex?: number;
    /**
     * Custom function to get the index of the current value.
     */
    getIndexOf?: (value: T, list: T[]) => number;
}
/**
 * Cycle through a list of items
 */
declare function useCycleList<T>(list: T[], options?: UseCycleListOptions<T>): UseCycleListReturn<T>;
interface UseCycleListReturn<T> {
    state: Accessor<T>;
    setState: Setter<T>;
    index: Accessor<number>;
    next: (n?: number) => T;
    prev: (n?: number) => T;
}

export { UseCycleListOptions, UseCycleListReturn, useCycleList };
