import * as solid_js from 'solid-js';
import { MaybeAccessor } from '@solidjs-use/shared';
import { ConfigurableWindow } from '../_configurable.js';
import { SpeechRecognition, SpeechRecognitionErrorEvent } from './types.js';

interface UseSpeechRecognitionOptions extends ConfigurableWindow {
    /**
     * Controls whether continuous results are returned for each recognition, or only a single result.
     *
     * @default true
     */
    continuous?: boolean;
    /**
     * Controls whether interim results should be returned (true) or not (false.) Interim results are results that are not yet final
     *
     * @default true
     */
    interimResults?: boolean;
    /**
     * Language for SpeechRecognition
     *
     * @default 'en-US'
     */
    lang?: MaybeAccessor<string>;
}
/**
 * Reactive SpeechRecognition.
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition SpeechRecognition
 */
declare function useSpeechRecognition(options?: UseSpeechRecognitionOptions): {
    isSupported: solid_js.Accessor<boolean>;
    isListening: solid_js.Accessor<boolean>;
    isFinal: solid_js.Accessor<boolean>;
    result: solid_js.Accessor<string>;
    setResult: solid_js.Setter<string>;
    recognition: SpeechRecognition | undefined;
    error: solid_js.Accessor<SpeechRecognitionErrorEvent | undefined>;
    toggle: (value?: boolean) => void;
    start: () => void;
    stop: () => void;
};
type UseSpeechRecognitionReturn = ReturnType<typeof useSpeechRecognition>;

export { UseSpeechRecognitionOptions, UseSpeechRecognitionReturn, useSpeechRecognition };
